/**
 * This file is auto-generated using abi-gen. Don't edit directly.
 * Templates can be found at https://github.com/0xProject/0x.js/tree/development/packages/abi-gen-templates.
 */
// tslint:disable-next-line:no-unused-variable
import {TxData, TxDataPayable} from '../../types';
import {promisify} from '../../utils/promisify';
import {classUtils} from '../../utils/classUtils';
import {BigNumber} from '../../utils/bignumber';

import { {{contractName }} as ContractArtifacts } from '@asekuro/contracts';

import * as Web3 from 'web3';

import { Web3Utils } from '../../utils/web3_utils';

import { BaseContract, CONTRACT_WRAPPER_ERRORS } from './base_contract_wrapper';

export class {{contractName}}Contract extends BaseContract {
{{#each methods}}
    {{#this.constant}}
    {{> call contractName=../contractName}}
    {{/this.constant}}
    {{^this.constant}}
    {{> tx contractName=../contractName}}
    {{/this.constant}}
{{/each}}

    public static async deployed(
        web3: Web3,
        defaults: Partial<TxData>,
    ): Promise<{{contractName}}Contract> {
        const web3Utils = new Web3Utils(web3);

        const currentNetwork = await web3Utils.getNetworkIdAsync();
        const { abi, networks }: { abi: any; networks: any } = ContractArtifacts;

        if (networks[currentNetwork]) {
            const { address: contractAddress } = networks[currentNetwork];

            const contractExists = await web3Utils.doesContractExistAtAddressAsync(contractAddress);

            if (contractExists) {
                const web3ContractInstance = web3.eth.contract(abi).at(contractAddress);
                return new {{contractName}}Contract(web3ContractInstance, defaults);
            } else {
                throw new Error(
                    CONTRACT_WRAPPER_ERRORS.CONTRACT_NOT_FOUND_ON_NETWORK(
                        "{{contractName}}",
                        currentNetwork,
                    ),
                );
            }
        } else {
            throw new Error(
                CONTRACT_WRAPPER_ERRORS.CONTRACT_NOT_FOUND_ON_NETWORK(
                    "{{contractName}}",
                    currentNetwork,
                ),
            );
        }
    }

    public static async at(
        address: string,
        web3: Web3,
        defaults: Partial<TxData>,
    ): Promise<{{contractName}}Contract> {
        const web3Utils = new Web3Utils(web3);

        const { abi }: { abi: any } = ContractArtifacts;

        const contractExists = await web3Utils.doesContractExistAtAddressAsync(address);
        const currentNetwork = await web3Utils.getNetworkIdAsync();

        if (contractExists) {
            const web3ContractInstance = web3.eth.contract(abi).at(address);

            return new {{contractName}}Contract(web3ContractInstance, defaults);
        } else {
            throw new Error(
                CONTRACT_WRAPPER_ERRORS.CONTRACT_NOT_FOUND_ON_NETWORK(
                    "{{contractName}}",
                    currentNetwork,
                ),
            );
        }
    }
    constructor(web3ContractInstance: Web3.ContractInstance, defaults: Partial<TxData>) {
        super(web3ContractInstance, defaults);
        classUtils.bindAll(this, ['web3ContractInstance', 'defaults']);
    }
} // tslint:disable:max-file-line-count
